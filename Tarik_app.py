import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import numpy as np
import datetime

# ======================
# Donn√©es ESG manuelles
# ======================
actifs = pd.DataFrame({
    "Nom": [
        "Schneider Electric", "Danone", "L'Or√©al", "Microsoft", "Tesla",
        "iShares ESG Aware MSCI USA ETF", "Vanguard ESG U.S. Stock ETF",
        "iShares USD Green Bond ETF", "Toyota", "TSMC"
    ],
    "ISIN": ["SU.PA", "BN.PA", "OR.PA", "MSFT", "TSLA", "ESGU", "ESGV", "BGRN", "TM", "TSM"],
    "Type": ["Action", "Action", "Action", "Action", "Action", "ETF", "ETF", "ETF", "Action", "Action"],
    "Secteur": [
        "Gestion de l'√©nergie", "Agroalimentaire", "Cosm√©tique", "Technologie", "Automobile",
        "Large-mid caps", "All caps", "Obligations vertes", "Automobile", "Technologie"
    ],
    "R√©gion": [
        "Europe", "Europe", "Europe", "Am√©rique", "Am√©rique",
        "Am√©rique", "Am√©rique", "Am√©rique", "Asie", "Asie"
    ],
    "ESG RISK RATING - Morningstar": [10.4, 18.01, 19.58, 17.34, 24.76, 19.73, 19.48, 18.96, 27.95, 15.19],
    "Certifications": [
        "ISO 14001, ISO 50001, ISO 45001, ISO 26000",
        "ISO 14001, ISO 50001, ISO 45001, ISO 26000, B Corp, Entreprise √† mission",
        "ISO 14001, ISO 50001, ISO 45001, ISO 26000, CDP",
        "ISO 14001",
        "ISO 14001, ISO 50001, ISO 45001, ISO 26000",
        "Aucune", "Aucune", "Aucune",
        "ISO 14001",
        "ISO 14001, ISO 50001, ISO 14064"
    ],
    "ODD": [
        "7, 9, 11, 12, 13, 17", "2, 3, 6, 12, 13, 17", "3, 5, 6, 12, 13, 17",
        "7, 9, 13, 17", "7, 9, 13, 17", "7, 9, 12, 13",
        "7, 9, 12, 13", "7, 9, 12, 13", "7, 9, 12, 13", "7, 9, 12, 13, 17"
    ],
    "Crit√®res environnementaux": [
        "Empreinte carbone r√©duite, 100 % √©nergies renouvelables, rapports ESG fr√©quents",
        "Neutralit√© carbone d'ici 2050, gestion de l'eau et des d√©chets, rapports ESG fr√©quents",
        "R√©duction des √©missions de CO2, gestion de l'eau et des d√©chets, rapports ESG fr√©quents",
        "Neutralit√© carbone, gestion de l'eau et des d√©chets, lutte contre le gaspillage, rapports ESG fr√©quents",
        "Neutralit√© carbone, transition √©cologique, rapports ESG fr√©quents",
        "S√©lection d'entreprises ESG, rapports ESG fr√©quents",
        "Faible exposition aux combustibles fossiles, rapports ESG fr√©quents",
        "Financement de projets √©cologiques, rapports ESG fr√©quents",
        "R√©duction des √©missions de CO2, pr√©servation de l'eau et de la biodiversit√©, rapports ESG fr√©quents",
        "√ânergie renouvelable, gestion de l'eau, r√©duction des √©missions de CO2"
    ],
    "Crit√®res sociaux": [
        "Diversit√© et inclusion, conditions de travail responsables, √©ducation et formation",
        "Conditions de travail √©quitables, acc√®s √† la nutrition, engagement communautaire",
        "Diversit√© et inclusion, responsabilit√© produit, bien-√™tre des employ√©s",
        "Diversit√© et inclusion, protection des donn√©es et confidentialit√©",
        "Diversit√© et inclusion, conditions de travail",
        "Diversit√© et inclusion",
        "√âgalit√© des genres",
        "Financement de projets √† impact social positif",
        "Diversit√© et inclusion, conditions de travail, engagement communautaire",
        "Diversit√© et inclusion, bien-√™tre des employ√©s, engagement communautaire"
    ],
})

# ======================
# Configuration de la page
# ======================
st.set_page_config(page_title="Portefeuille Durable", layout="wide")
st.title("üå± Portefeuille de Finance Durable")
st.markdown("Ce portefeuille est construit √† partir de crit√®res extra-financiers (ESG, ODD, labels, ISO 14001, etc.).")

# ======================
# Filtres utilisateur
# ======================
st.sidebar.header("üîç Filtres")

# Renommage pour simplifier le code
actifs = actifs.rename(columns={"ESG RISK RATING - Morningstar": "Score ESG"})

Types = st.sidebar.multiselect("Type d‚Äôactif", options=actifs["Type"].unique(), default=actifs["Type"].unique())
Secteur = st.sidebar.multiselect("Secteur", options=actifs["Secteur"].unique(), default=actifs["Secteur"].unique())
Region = st.sidebar.multiselect("R√©gion", options=actifs["R√©gion"].unique(), default=actifs["R√©gion"].unique())

# Flatten certifications (en s√©parant chaque certification individuelle)
certifications_uniques = sorted({c.strip() for sublist in actifs["Certifications"].str.split(",") for c in sublist})
Certifications = st.sidebar.multiselect("Certifications", options=certifications_uniques, default=[])

# Extraire les ODD en liste
odds_uniques = sorted({o.strip() for sublist in actifs["ODD"].str.split(",") for o in sublist})
odds = st.sidebar.multiselect("ODD (Objectifs de D√©veloppement Durable)", options=odds_uniques, default=[])

score_min = st.sidebar.slider("Score ESG maximum des actifs", min_value=0.0, max_value=50.0, value=25.0, step=0.1)

# Filtrage initial
actifs_filtres = actifs[(
    actifs["Type"].isin(Types)) &
    (actifs["Secteur"].isin(Secteur)) &
    (actifs["R√©gion"].isin(Region)) &
    (actifs["Score ESG"] <= score_min)  # ESG RISK plus bas = meilleur score
]

# Filtrage ODD
if odds:
    actifs_filtres = actifs_filtres[actifs_filtres["ODD"].apply(lambda x: any(o in x.split(",") for o in odds))]

# Filtrage certifications
if Certifications:
    actifs_filtres = actifs_filtres[actifs_filtres["Certifications"].apply(lambda x: any(c.strip() in x for c in Certifications))]

# Calcul des poids invers√©s des actifs filtr√©s
if not actifs_filtres.empty:
    # Calcul des poids invers√©s
    actifs_filtres["Poids Invers√©s"] = 1 / actifs_filtres["Score ESG"]
    
    # Normalisation des poids (la somme des poids doit √™tre √©gale √† 1)
    total_poids = actifs_filtres["Poids Invers√©s"].sum()
    actifs_filtres["Poids"] = actifs_filtres["Poids Invers√©s"] / total_poids

# ======================
# Tableau des actifs s√©lectionn√©s
# ======================
st.header("üìã Actifs du portefeuille filtr√©")
st.dataframe(actifs_filtres.reset_index(drop=True), use_container_width=True)

# ======================
# üß† Notre choix : cr√©ation d‚Äôun portefeuille personnalis√©
# ======================
st.header("Notre approche : un portefeuille construit sur mesure")
st.markdown("""
Dans le cadre de ce projet, nous avons fait le choix de **ne pas s√©lectionner un fonds existant**, mais de construire **notre propre portefeuille durable** √† partir d‚Äôune s√©lection d‚Äôactifs cot√©s et d‚ÄôETF labellis√©s.

Notre d√©marche repose sur une volont√© de :
- **contr√¥ler les crit√®res ESG choisis** et les pond√©rations appliqu√©es,
- **analyser activement l‚Äôalignement avec les ODD** (Objectifs de D√©veloppement Durable),
- et surtout de **tester une m√©thodologie personnelle** inspir√©e des meilleures pratiques en finance durable.

Nous avons donc d√©fini nos propres crit√®res de filtrage : type d‚Äôactif, score ESG, certifications ISO, ODD, etc., et nous avons pond√©r√© les actifs s√©lectionn√©s en fonction de leur performance extra-financi√®re.
""")

# ======================
# üìò 1. Explication de la strat√©gie ESG
# ======================
st.header("üìò Strat√©gie ESG du portefeuille")
st.markdown("""
Ce portefeuille est construit selon une approche **best-in-class**, qui consiste √† s√©lectionner les entreprises ayant les meilleurs scores ESG dans leur secteur.

La strat√©gie repose sur :
- l'exclusion d'actifs au-del√† d‚Äôun seuil ESG donn√© (score > 25 √©limin√©s)
- une pond√©ration **inversement proportionnelle au risque ESG** (plus l‚Äôentreprise est vertueuse, plus elle est pond√©r√©e)
- une s√©lection diversifi√©e de secteurs, zones g√©ographiques et types d‚Äôactifs

Les donn√©es ESG sont issues de la notation **Morningstar**, combin√©e √† des certifications et alignements avec les **Objectifs de D√©veloppement Durable (ODD)**.
""")

# ======================
# üåø 2. Analyse de l'impact ESG
# ======================
st.header("üåø Analyse d'impact ESG")
if not actifs_filtres.empty:
    score_moyen = round(actifs_filtres["Score ESG"].mean(), 2)
    st.markdown(f"**Score ESG moyen du portefeuille :** `{score_moyen}`")

    st.markdown("""
    üîç **Interpr√©tation :** Un score ESG plus faible signifie un meilleur comportement extra-financier.
    - < 15 : tr√®s faible risque ESG 
    - 15 √† 20 : risque mod√©r√© 
    - \\> 20 : √† surveiller 

    De plus, les entreprises sont analys√©es en fonction de leurs contributions aux **ODD** :
    """)
    odd_series = actifs_filtres["ODD"].str.split(", ").explode().value_counts()
    st.bar_chart(odd_series)
else:
    st.info("Aucun actif s√©lectionn√© pour analyser l'impact ESG.")

# ======================
# üè∑Ô∏è 3. Int√©gration des labels et r√©glementations
# ======================
st.header("üè∑Ô∏è Labels et r√©glementations durables")
st.markdown("""
Certains actifs du portefeuille disposent de labels ou certifications qui renforcent leur engagement durable :

- **ISO 14001** : management environnemental
- **ISO 50001** : efficacit√© √©nerg√©tique
- **ISO 26000** : responsabilit√© soci√©tale
- **B Corp**, **Entreprise √† mission**, **CDP** : certifications extra-financi√®res

La composition respecte les objectifs de la **r√©glementation SFDR** en mati√®re de transparence ESG. Elle pourrait aussi √™tre compatible avec un label ISR (Investissement Socialement Responsable) en France.
""")

# ======================
# üìä 4. Suivi combin√© des performances financi√®res et ESG
# ======================
st.header("üìä Tableau de bord ESG & financier")
if not actifs_filtres.empty:
    comparaison = actifs_filtres[["Nom", "Score ESG", "Poids"]].copy()
    comparaison = comparaison.sort_values(by="Poids", ascending=False)
    st.dataframe(comparaison.style.format({"Score ESG": "{:.2f}", "Poids": "{:.2%}"}), use_container_width=True)
    st.markdown("""
    Ce tableau permet de croiser la performance ESG des entreprises avec leur importance dans le portefeuille.
    Il constitue un outil de **pilotage int√©gr√©** : durable et financier.
    """)
else:
    st.info("Aucun actif s√©lectionn√© pour afficher le tableau ESG/Finance.")

# ======================
# Fin du rapport enrichi
# ======================


# ======================
# Visualisation ESG
# ======================
st.header("üìä Visualisation ESG")

def draw_pie_chart(data, title, cmap):
    fig, ax = plt.subplots(figsize=(3, 3))
    couleurs = cmap(np.linspace(0, 1, len(data)))
    wedges, texts, autotexts = ax.pie(
        data,
        labels=None,  # Supprimer les labels du camembert
        autopct="%1.1f%%",
        startangle=90,
        colors=couleurs,
        textprops={'fontsize': 7}
    )
    ax.axis("equal")
    ax.set_title(title, fontsize=10)

    # Ajouter l√©gende √† c√¥t√© pour ne pas tasser le camembert
    ax.legend(
        data.index,
        loc="center left",
        bbox_to_anchor=(1, 0.5),
        fontsize=6,
        frameon=False
    )
    return fig

col1, col2, col3 = st.columns(3)

with col1:
    secteur_data = actifs_filtres.groupby("Secteur")["Poids"].sum().sort_values(ascending=False)
    fig1 = draw_pie_chart(secteur_data, "Secteurs", plt.cm.Paired)
    st.pyplot(fig1)

with col2:
    region_data = actifs_filtres.groupby("R√©gion")["Poids"].sum().sort_values(ascending=False)
    fig2 = draw_pie_chart(region_data, "R√©gions", plt.cm.Set3)
    st.pyplot(fig2)

with col3:
    type_data = actifs_filtres.groupby("Type")["Poids"].sum().sort_values(ascending=False)
    fig3 = draw_pie_chart(type_data, "Types d‚Äôactifs", plt.cm.Accent)
    st.pyplot(fig3)

# ======================
# Performances financi√®res
# ======================
st.header("üìà Performances du portefeuille")

end_date = datetime.datetime.today()
start_date = end_date - datetime.timedelta(days=3*365)

tickers = actifs_filtres["ISIN"].tolist()

if not tickers:
    st.warning("Aucun actif s√©lectionn√©. Veuillez ajuster vos filtres.")
else:
    data = yf.download(tickers, start=start_date, end=end_date)["Close"].bfill()

    if data.empty:
        st.error("Les donn√©es financi√®res n'ont pas pu √™tre r√©cup√©r√©es.")
    else:
        data.dropna(axis=1, how='any', inplace=True)

        if data.empty:
            st.error("Pas assez de donn√©es valides apr√®s nettoyage.")
        else:
            performance_par_actif = (data.iloc[-1] / data.iloc[0]) - 1
            performance_portefeuille = performance_par_actif.mean()
            st.metric(label="Performance sur 3 ans", value=f"{performance_portefeuille:.2%}")

            data_normalized = data 

            # Utilisation des poids des actifs filtr√©s
            poids_dict = actifs_filtres.set_index("ISIN")["Poids"].to_dict()
            data_weighted = data_normalized.multiply([poids_dict.get(t, 0) for t in data.columns], axis=1)

            valeur_actuelle = data_weighted.sum(axis=1).iloc[-1]
            st.metric(label="Valeure actuelle du portefeuille", value=f"{round(valeur_actuelle,2)}")

            # √âvolution du portefeuille dans le temps
            st.write("### üìâ √âvolution de la valeur du portefeuille depuis 3 ans")

            valeur_portefeuille = data_weighted.sum(axis=1)

            st.line_chart(valeur_portefeuille)

            # D√©tail par actif
            st.write("### üîç D√©tail par actif depuis 3 ans")
            st.dataframe(performance_par_actif.sort_values(ascending=False).map(lambda x: f"{x:.2%}"))
